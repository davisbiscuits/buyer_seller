// Code generated by mockery v2.15.0. DO NOT EDIT.

package serviceMocks

import mock "github.com/stretchr/testify/mock"

// IProductService is an autogenerated mock type for the IProductService type
type IProductService struct {
	mock.Mock
}

// AddBuyerRequirements provides a mock function with given fields: productName, productQuantity, productPrice, buyerID
func (_m *IProductService) AddBuyerRequirements(productName string, productQuantity int, productPrice int, buyerID int) (int64, error) {
	ret := _m.Called(productName, productQuantity, productPrice, buyerID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, int, int, int) int64); ok {
		r0 = rf(productName, productQuantity, productPrice, buyerID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int, int) error); ok {
		r1 = rf(productName, productQuantity, productPrice, buyerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSellerProducts provides a mock function with given fields: productName, productQuantity, productPrice, sellerID
func (_m *IProductService) AddSellerProducts(productName string, productQuantity int, productPrice int, sellerID int) (int64, error) {
	ret := _m.Called(productName, productQuantity, productPrice, sellerID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, int, int, int) int64); ok {
		r0 = rf(productName, productQuantity, productPrice, sellerID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int, int) error); ok {
		r1 = rf(productName, productQuantity, productPrice, sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIProductService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIProductService creates a new instance of IProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIProductService(t mockConstructorTestingTNewIProductService) *IProductService {
	mock := &IProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
